#codice R per definire le soglie di copertura nuvolosa per il codice GEE
#si imposta almeno 1 img per definire fillCloudCover, si impostano 20/25 img per definire la soglia cloudCover
#tollerenza impostata a +/- 5 kilometri quadrati


# Carico le librerie necessarie
library(rgee)
library(openxlsx)

# Imposto la directory di lavoro
setwd("C:/PN_Sila")

# Inizializzo rgee
ee_Initialize()

# Definisco l'AOI (Area of Interest)
aoi <- ee$FeatureCollection('projects/ee-roncaratimanuel/assets/PN_Sila')

# Creo la funzione per applicare i fattori di scala (correzione radiometrica)
apply_scale_factors <- function(image) {
    optical_bands <- image$select('SR_B.')$multiply(0.0000275)$add(-0.2)
    image$addBands(optical_bands, NULL, TRUE)
}

# Creo la funzione per calcolare l'area della composita filtrata e il numero di immagini
calculate_area_and_size <- function(cloud_cover, landsat_collection) {
    filtered <- landsat_collection$filter(ee$Filter$lt('CLOUD_COVER', cloud_cover))
    size <- filtered$size()$getInfo()
    
    if (size == 0) {
        return(list(area = NA, size = 0))
    }
    
    composite <- filtered$median()$clip(aoi)
    pixel_area <- ee$Image$pixelArea()
    valid_area <- composite$select(0)$gt(0)$multiply(pixel_area)$reduceRegion(
        reducer = ee$Reducer$sum(),
        geometry = aoi$geometry(),
        scale = 30,
        maxPixels = 1e13
    )
    area_result <- valid_area$getInfo()
    
    if (length(area_result) == 0) {
        return(list(area = NA, size = size))
    }
    
    area_value <- round(unlist(area_result)[1] / 1e6, 3)
    return(list(area = area_value, size = size))
}

# Creo la funzione per calcolare l'area di riferimento (100% copertura nuvolosa)
calculate_reference_area <- function(landsat_collection) {
    composite <- landsat_collection$filter(ee$Filter$lt('CLOUD_COVER', 100))$median()$clip(aoi)
    pixel_area <- ee$Image$pixelArea()
    valid_area <- composite$select(0)$gt(0)$multiply(pixel_area)$reduceRegion(
        reducer = ee$Reducer$sum(),
        geometry = aoi$geometry(),
        scale = 30,
        maxPixels = 1e13
    )
    area_result <- valid_area$getInfo()
    if (length(area_result) == 0) {
        return(NA)
    }
    area_value <- round(unlist(area_result)[1] / 1e6, 3)
    return(area_value)
}

# Definisco la sequenza di periodi di tempo da analizzare
periods <- list(
    c('1984-06-15', '1988-08-15'),
    c('1988-06-15', '1992-08-15'),
    c('1992-06-15', '1996-08-15'),
    c('1996-06-15', '2000-08-15'),
    c('2000-06-15', '2004-08-15'),
    c('2004-06-15', '2008-08-15'),
    c('2008-06-15', '2012-08-15'),
    c('2012-06-15', '2016-08-15'),
    c('2016-06-15', '2020-08-15'),
    c('2020-06-15', '2024-08-15')
)

# Inizializzo le liste per salvare i risultati
all_results <- list()
min_cloud_cover_results <- list()

# Calcolo il tempo di esecuzione totale
start_time <- Sys.time()
cat("Inizio elaborazione...\n")

# Itero su ogni periodo di tempo
for (i in seq_along(periods)) {
    period <- periods[[i]]
    start_date <- period[1]
    end_date <- period[2]
    
    cat(sprintf("\nElaborazione del periodo %d/%d: %s - %s\n", 
                i, length(periods), start_date, end_date))
    
    # Creo la collezione Landsat pre-filtrata per tempo e spazio
    if (as.Date(start_date) < as.Date('2012-06-15')) {
        landsat_base <- ee$ImageCollection('LANDSAT/LT05/C02/T1_L2')$
            filterBounds(aoi)$
            filter(ee$Filter$calendarRange(6, 8, 'month'))$
            filterDate(start_date, end_date)
    } else {
        landsat_base <- ee$ImageCollection('LANDSAT/LC08/C02/T1_L2')$
            filterBounds(aoi)$
            filter(ee$Filter$calendarRange(6, 8, 'month'))$
            filterDate(start_date, end_date)
    }
    
    landsat <- landsat_base$map(apply_scale_factors)
    
    reference_area <- calculate_reference_area(landsat_base)
    if (is.na(reference_area)) {
        cat("  Attenzione: area di riferimento non calcolata.\n")
    } else {
        cat(sprintf("  Area di riferimento: %.3f km²\n", reference_area))
    }
    
    min_cloud_cover_with_same_area <- NA
    
    area_results <- list()
    size_results <- list()
    
    # Itero sulla copertura nuvolosa da 100 a 1
    for (cloud_cover in seq(100, 1, by = -1)) {
        cat(sprintf("    Copertura nuvolosa: %d%%\n", cloud_cover))
        
        tryCatch({
            result <- calculate_area_and_size(cloud_cover, landsat)
            area <- result$area
            size <- result$size
            
            area_results[[as.character(cloud_cover)]] <- area
            size_results[[as.character(cloud_cover)]] <- size
            
            cat(sprintf("      Area: %s km², Numero di immagini: %d\n", 
                        ifelse(is.na(area), "NA", area), size))
            
            if (!is.na(area) && !is.na(reference_area) && abs(area - reference_area) <= 1 && size >= 1) { # 1 img per la soglia fillCloudCover, 20/25 per la soglia cloud_cover
                min_cloud_cover_with_same_area <- cloud_cover
                cat("      Condizione soddisfatta per la copertura nuvolosa minima.\n")
                # Se voglio interrompere il ciclo interno una volta trovata la copertura minima, posso de-commentare il break
                # break
            }
        }, error = function(e) {
            area_results[[as.character(cloud_cover)]] <- NA
            size_results[[as.character(cloud_cover)]] <- NA
            cat(sprintf("      Errore durante il calcolo per copertura %d%%: %s\n", 
                        cloud_cover, e$message))
        })
    }
    
    results_df <- data.frame(
        Cloud_Cover = as.numeric(names(area_results)),
        Area_km2 = unlist(area_results),
        Numero_Immagini = unlist(size_results),
        Periodo = paste(start_date, end_date, sep = " - ")
    )
    results_df <- results_df[order(-results_df$Cloud_Cover), ]
    
    all_results[[paste(start_date, end_date)]] <- results_df
    
    if (!is.na(min_cloud_cover_with_same_area)) {
        min_area <- area_results[[as.character(min_cloud_cover_with_same_area)]]
        min_cloud_cover_results[[paste(start_date, end_date)]] <- data.frame(
            Periodo = paste(start_date, end_date, sep = " - "),
            Min_Cloud_Cover = min_cloud_cover_with_same_area,
            Area_km2 = min_area,
            Numero_Immagini = size_results[[as.character(min_cloud_cover_with_same_area)]]
        )
    } else {
        cat("  Nessuna copertura nuvolosa soddisfa la condizione per questo periodo.\n")
    }
}

end_time <- Sys.time()
total_time <- end_time - start_time
cat(sprintf("\nTempo totale di esecuzione: %s\n", total_time))

# ====================================================
# Salvo i risultati in un file Excel
# ====================================================

# Definisco il percorso del file Excel
output_excel_path <- "all_area_per_cloud_cover_results_+/-_5_1_img_Sila.xlsx" # soglia fillCloudCover, almeno una immagine che copra l'Aoi

# Creo il workbook e aggiungo i fogli
wb <- createWorkbook()
addWorksheet(wb, "All Results")
addWorksheet(wb, "Min Cloud Cover Results")

# Scrivo i dati nei fogli
cat("Salvataggio dei risultati nel file Excel...\n")
writeData(wb, "All Results", do.call(rbind, all_results))
writeData(wb, "Min Cloud Cover Results", do.call(rbind, min_cloud_cover_results))

# Salvo il file Excel
saveWorkbook(wb, output_excel_path, overwrite = TRUE)

cat("\nRisultati salvati in formato Excel:", output_excel_path, "\n")

# Visualizzo i risultati finali
final_results_df <- do.call(rbind, all_results)
min_cloud_cover_df <- do.call(rbind, min_cloud_cover_results)

print(final_results_df)
print(min_cloud_cover_df)
