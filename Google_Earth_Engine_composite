#Questo primo codice realizza la forma più semplice di composita mediana mediante un filtro basato sul periodo di interesse e la copertura nuvolosa 


// Definisco l'AOI caricando lo shapefile dagli assets (Area di interesse)
var aoi = ee.FeatureCollection('projects/ee-roncaratimanuel/assets/PN_Sila');

// Centro la mappa sull'AOI, il secondo parametro è il livello di zoom
Map.centerObject(aoi, 10);

// Definisco le variabili temporali
var startDate = '1984-06-01';
var endDate = '1988-07-31';

// Carico e filtro la collezione Landsat 5
var landsat5 = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2')
    .filterBounds(aoi)
    .filter(ee.Filter.calendarRange(6, 7, 'month')) // Filtra solo i mesi di giugno e luglio
    .filterDate(startDate, endDate);

// Applico i fattori di scala alle bande ottiche
function applyScaleFactors(image) {
    var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
    return image.addBands(opticalBands, null, true);
}

landsat5 = landsat5.map(applyScaleFactors);

// Creo un'immagine composita (mediana) e ritaglio secondo l'AOI
var composite = landsat5.median().clip(aoi);

var visParams = {
    bands: ['SR_B3', 'SR_B2', 'SR_B1'], // Uso le bande RGB Landsat 5 per la visualizzazione nella mappa
    min: 0,
    max: 0.2
};
// visualizzo la composita filtrata per il periodo di interesse 
Map.addLayer(composite, visParams, 'L5 Composite');

// Filtro in base alla copertura nuvolosa (CLOUD_COVER)
var landsat5FiltClouds = landsat5
    .filterBounds(aoi)
    .filter(ee.Filter.calendarRange(6, 7, 'month')) // Filtra solo giugno e luglio
    .filterDate(startDate, endDate)
    .filter(ee.Filter.lessThan('CLOUD_COVER', 50));

// Creo un'immagine composita dalle immagini filtrate
var compositeFiltClouds = landsat5FiltClouds.median().clip(aoi);
// visualizzo la composita mediana filtrata per CLOUD_COVER
Map.addLayer(compositeFiltClouds, visParams, 'L5 Composite cloud filter');

// Stampo la dimensione delle collezioni per il confronto nel numero di immagini disponibili
print('Dimensione collezione landsat5', landsat5.size());
print('Dimensione collezione landsat5 con filtro nuvole', landsat5FiltClouds.size());

// Definisco la funzione di mascheratura delle nuvole
function maskSrClouds(image) {
    // Bit 0 - Fill
    // Bit 1 - Dilated Cloud
    // Bit 2 - Cirrus
    // Bit 3 - Cloud
    // Bit 4 - Cloud Shadow
    var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
    var saturationMask = image.select('QA_RADSAT').eq(0);

    return image.updateMask(qaMask)
        .updateMask(saturationMask);
}

// Applico la maschera per le nuvole alla collezione filtrata
var landsat5FiltMasked = landsat5FiltClouds.map(maskSrClouds);

// Creo una composita mascherata per le nuvole 
var landsat5compositeMasked = landsat5FiltMasked.median().clip(aoi);

Map.addLayer(landsat5compositeMasked, visParams, 'L5 composite masked');



















#Questo secondo codice rappresente il processo produttivo dell'immagine CompositeFilled con le due soglie di cloud_cover


// Definisco l'AOI dal mio shapefile
var aoi = ee.FeatureCollection('projects/ee-roncaratimanuel/assets/PN_Sila');
// Centro la mappa sull'AOI; il secondo parametro rappresenta il livello di zoom
Map.centerObject(aoi, 10);

// Creo la lista dei periodi e i relativi valori minimi di copertura nuvolosa
var periods = [
  {start: '1984-06-15', end: '1988-08-15', cloudCover: 4, fillCloudCover: 1},
  {start: '1988-06-15', end: '1992-08-15', cloudCover: 4, fillCloudCover: 1},
  {start: '1992-06-15', end: '1996-08-15', cloudCover: 3, fillCloudCover: 1},
  {start: '1996-06-15', end: '2000-08-15', cloudCover: 2, fillCloudCover: 1},
  {start: '2000-06-15', end: '2004-08-15', cloudCover: 4, fillCloudCover: 1},
  {start: '2004-06-15', end: '2008-08-15', cloudCover: 35, fillCloudCover: 1},
  {start: '2008-06-15', end: '2012-08-15', cloudCover: 19, fillCloudCover: 1},
  {start: '2012-06-15', end: '2016-08-15', cloudCover: 5, fillCloudCover: 1},
  {start: '2016-06-15', end: '2020-08-15', cloudCover: 4, fillCloudCover: 1},
  {start: '2020-06-15', end: '2024-08-15', cloudCover: 2, fillCloudCover: 1}
];

// Funzione per applicare i fattori di scala alle immagini
function applyScaleFactors(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  return image.addBands(opticalBands, null, true);
}

// Funzione per mascherare le nuvole
function maskSrClouds(image) {
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0);
  return image.updateMask(qaMask).updateMask(saturationMask);
}

// Funzione per calcolare l'area di una composita
function calculateArea(composite) {
  var pixelArea = ee.Image.pixelArea();
  var validArea = composite.select(0).gt(0).multiply(pixelArea).reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: aoi.geometry(),
    scale: 30,
    maxPixels: 1e13
  });
  return ee.Number(validArea.values().get(0)).divide(1e6); // Converto in km²
}

// Itero su ogni periodo per creare compositi filtrati
periods.forEach(function(period) {
  var startDate = period.start;
  var endDate = period.end;
  var cloudCover = period.cloudCover;
  var fillCloudCover = period.fillCloudCover;

  // Determino quale collezione Landsat utilizzare in base al periodo
  var landsatCollection;
  var bands;
  var visParams;

  if (startDate < '2012-06-15') {
    landsatCollection = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2');
    bands = ['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7'];
    visParams = {bands: ['SR_B3', 'SR_B2', 'SR_B1'], min: 0, max: 0.2};
  } else {
    landsatCollection = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2');
    bands = ['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7'];
    visParams = {bands: ['SR_B4', 'SR_B3', 'SR_B2'], min: 0, max: 0.2};
  }

  // Carico e filtro la collezione Landsat
  var landsat = landsatCollection
      .filterBounds(aoi)
      .filter(ee.Filter.calendarRange(6, 8, 'month')) // Filtro per includere solo i mesi di giugno e luglio
      .filterDate(startDate, endDate)
      .map(applyScaleFactors);

  // Filtro le immagini in base alla copertura nuvolosa per la mascheratura
  var landsatFiltClouds = landsat.filter(ee.Filter.lessThan('CLOUD_COVER', cloudCover));
  var landsatFiltMasked = landsatFiltClouds.map(maskSrClouds);

  // Filtro le immagini in base alla copertura nuvolosa per il riempimento
  var landsatFillClouds = landsat.filter(ee.Filter.lessThan('CLOUD_COVER', fillCloudCover));
  var compositeFillClouds = landsatFillClouds.median().clip(aoi);

  // Creo i compositi
  var landsatCompositeMasked = landsatFiltMasked.median().clip(aoi);
  var compositeMaskedSelected = landsatCompositeMasked.select(bands);
  var compositeFillCloudsSelected = compositeFillClouds.select(bands);
  var compositeFilled = compositeMaskedSelected.unmask(compositeFillCloudsSelected);

  // Calcolo l'area dei compositi
  var areaOriginal = calculateArea(landsat.median().clip(aoi));
  var areaMasked = calculateArea(landsatCompositeMasked);
  var areaFilled = calculateArea(compositeFilled);

  // Stampo il numero di immagini e le aree
  print('Periodo: ' + startDate + ' - ' + endDate);
  print('Numero immagini originali:', landsat.size());
  print('Numero immagini filtrate per nuvole:', landsatFiltClouds.size());
  print('Numero immagini per riempimento:', landsatFillClouds.size());
  print('Area originale (km²):', areaOriginal);
  print('Area mascherata (km²):', areaMasked);
  print('Area riempita (km²):', areaFilled);

  // Visualizzo l'immagine "filled"
  Map.addLayer(compositeFilled, visParams, 'Composite Filled ' + startDate + ' to ' + endDate);

  // Esporto il risultato
  Export.image.toDrive({
    image: compositeFilled,
    description: 'Composite_Filled_' + startDate + '_' + endDate,
    folder: 'EarthEngineExports',
    scale: 30, // Imposto la risoluzione in metri
    region: aoi.geometry(),
    maxPixels: 1e13
  });
});
